{"version":3,"sources":["calculadora.service.js","calculadora.js","serviceWorker.js","index.js"],"names":["CalculadoraService","num1","num2","operacao","resultado","numAtual","numConcat","indexOf","Calculadora","calcular","concatenar","SOMA","SUBTRACAO","DIVISAO","MULTIPLICACAO","useState","txtNumeros","setTxtNumeros","numero1","setNumero1","numero2","setNumero2","setOperacao","adicionarNumero","numero","definirOperacao","op","parseFloat","toString","Jumbotron","style","background","backgroundColor","padding","margin","width","Container","Row","Col","xs","Button","variant","onClick","Form","Control","type","name","className","readOnly","value","data-testid","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.188dc139.chunk.js","sourcesContent":["function CalculadoraService() {\n\n    const SOMA = '+';\n    const SUBTRACAO = '-';\n    const DIVISAO = '/';\n    const MULTIPLICACAO = '*';\n\n    function calcular(num1, num2, operacao) {\n        let resultado;\n\n        switch(operacao) {\n            case SOMA:\n                resultado = num1 + num2;\n                break;\n            case SUBTRACAO:\n                resultado = num1 - num2;\n                break;\n            case DIVISAO:\n                resultado = num1 / num2;\n                break;\n            case MULTIPLICACAO:\n                resultado = num1 * num2;\n                break;\n            default:\n                resultado = 0;\n        }\n\n        return resultado;\n    }\n\n    function concatenar(numAtual, numConcat) {\n        // caso contenha apenas '0' ou null, reinicia o valor\n        if (numAtual === '0' || numAtual === null) {\n            numAtual = '';\n        }\n        // primeiro dígito for '.', concatena '0' antes do '.'\n        if (numConcat === '.' && numAtual === '') {\n            return numAtual = 0.;\n        }\n        // caso '.' digitado e já contenha ponto, apenas retornar\n        if (numConcat === '.' && numAtual.indexOf('.') > -1) {\n            return numAtual;\n        }\n\n        return numAtual + numConcat;\n    }\n\n    return [\n        calcular,\n        concatenar,\n        SOMA,\n        SUBTRACAO,\n        DIVISAO,\n        MULTIPLICACAO\n    ];\n}\n\nexport default CalculadoraService;","import React, { useState } from 'react';\nimport './calculadora.css';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\nimport { \n  Jumbotron, Container, Row, Col, Button, Form\n} from 'react-bootstrap';\nimport CalculadoraService from './calculadora.service'\n\nfunction Calculadora() {\n\n  const [calcular, concatenar, SOMA, SUBTRACAO, DIVISAO, MULTIPLICACAO] = CalculadoraService();\n\n  const [txtNumeros, setTxtNumeros] = useState('0');\n  const [numero1, setNumero1] = useState('0');\n  const [numero2, setNumero2] = useState(null);\n  const [operacao, setOperacao] = useState(null);\n\n  function adicionarNumero(numero) {\n    let resultado;\n    if (operacao === null) {\n      resultado = concatenar(numero1, numero);\n      setNumero1(resultado);\n    } else {\n      resultado = concatenar(numero2, numero);\n      setNumero2(resultado);\n    }\n    setTxtNumeros(resultado);\n  }\n\n  function definirOperacao(op) {\n    // Apenas define a operação caso ela não exista\n    if (operacao == null) {\n      setOperacao(op);\n        return;\n    }\n    // Caso a operação estiver definida e numero2 selecionado, realiza o calculo da operação\n    if (numero2 !== null) {\n      const resultado = calcular(parseFloat(numero1), parseFloat(numero2), operacao);\n      setOperacao(op);\n      setNumero1(resultado.toString());\n      setNumero2(null);\n      setTxtNumeros(resultado.toString());\n    }\n  }\n\n  function acaoCalcular() {\n    if (numero2 === null) {\n      return;\n    }\n    const resultado = calcular(parseFloat(numero1), parseFloat(numero2), operacao);\n    setTxtNumeros(resultado);\n  }\n\n  function acaoDeletar() {\n    setTxtNumeros('0');\n    setNumero1('0');\n    setNumero2(null);\n    setOperacao(null);\n  }\n\n  return (\n    <Jumbotron style={{\n      background: 'transparent !important',\n      backgroundColor: '#007bff',\n      padding: '5px',\n      margin: '5px',\n      width: '400px'      \n    }}>\n\n    <Container>\n      <Row>\n        <Col xs=\"3\">\n          <Button variant=\"danger\"\n          onClick={acaoDeletar}>C</Button>\n        </Col>\n\n        <Col xs=\"9\">\n          <Form.Control type=\"text\"\n          name=\"txtNumeros\"\n          className=\"text-right\"\n          readOnly=\"readonly\"\n          value={txtNumeros}\n          data-testid=\"txtNumeros\"/>\n        </Col>\n      </Row>\n\n      <Row>\n        <Col>\n          <Button variant=\"light\"\n          onClick={() => adicionarNumero('7')}>7</Button>\n        </Col>\n        <Col>\n          <Button variant=\"light\"\n          onClick={() => adicionarNumero('8')}>8</Button>\n        </Col>\n        <Col>\n          <Button variant=\"light\"\n          onClick={() => adicionarNumero('9')}>9</Button>\n        </Col>\n        <Col>\n          <Button variant=\"warning\"\n          onClick={() => definirOperacao(DIVISAO)}>/</Button>\n        </Col>\n      </Row>\n\n      <Row>\n        <Col>\n            <Button variant=\"light\"\n            onClick={() => adicionarNumero('4')}>4</Button>\n        </Col>\n        <Col>\n          <Button variant=\"light\"\n          onClick={() => adicionarNumero('5')}>5</Button>\n        </Col>\n        <Col>\n          <Button variant=\"light\"\n          onClick={() => adicionarNumero('6')}>6</Button>\n        </Col>\n        <Col>\n          <Button variant=\"warning\"\n          onClick={() => definirOperacao(MULTIPLICACAO)}>*</Button>\n        </Col>\n      </Row>\n\n      <Row>\n        <Col>\n          <Button variant=\"light\"\n          onClick={() => adicionarNumero('1')}>1</Button>\n        </Col>\n        <Col>\n          <Button variant=\"light\"\n          onClick={() => adicionarNumero('2')}>2</Button>\n        </Col>\n        <Col>\n          <Button variant=\"light\"\n          onClick={() => adicionarNumero('3')}>3</Button>\n        </Col>\n        <Col>\n          <Button variant=\"warning\"\n          onClick={() => definirOperacao(SUBTRACAO)}>-</Button>\n        </Col>\n      </Row>\n\n      <Row>\n        <Col>\n            <Button variant=\"light\"\n            onClick={() => adicionarNumero('0')}>0</Button>\n        </Col>\n        <Col>\n          <Button variant=\"light\"\n          onClick={() => adicionarNumero('.')}>.</Button>\n        </Col>\n        <Col>\n          <Button variant=\"success\"\n          onClick={acaoCalcular}>=</Button>\n        </Col>\n        <Col>\n          <Button variant=\"warning\"\n          onClick={() => definirOperacao(SOMA)}>+</Button>\n        </Col>\n      </Row>\n\n    </Container>\n\n    </Jumbotron>\n  );\n}\n\nexport default Calculadora;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Calculadora from './calculadora';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Calculadora />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}